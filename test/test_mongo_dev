 DBOptions = lists:foldl(fun(OptName, Acc) ->
    case application:get_env(OptName) of
      {ok, Val} -> [{OptName, Val} | Acc];
       _ -> Acc
     end
   end, [], [db_port, db_host, db_username, db_password, db_database]).


 DBAdapter = mongodb.
 CacheEnable = true.
 DBShards = [].

 DBOptions1 = [{adapter, list_to_atom(lists:concat([DBAdapter, ""]))},
     {cache_enable, CacheEnable}, {shards, DBShards} | DBOptions].
[{adapter,mongodb},{cache_enable,true},{shards,[]}].
  MemcachedCacheServerOpts = [
     {"localhost", 11211, 1}],
   CacheOptions = [
     {adapter, memcached_bin},
     {cache_servers, MemcachedCacheServerOpts}
   ].
   boss_db:start(DBOptions1),
   boss_cache:start(CacheOptions),
   boss_news:start().
   {ok, boss_db_test_simple} = boss_record_compiler:compile(filename:join(["priv", "test_models", "boss_db_test_simple.erl"])).
[A|_]=boss_db:find(boss_db_test_simple,[]).

boss_db:update(boss_db_test_simple,[{id,"boss_db_test_simple-5548cec4cf0c4523b7000001"}],[{simple_text,<<"hi-update">>},{some_array,[1]}],[]).



boss_db:update(boss_db_test_simple,[{id,"boss_db_test_simple-5548cec4cf0c4523b7000001"}],[{some_array,4}],[{operator,'$addToSet'}]).


{ok,A} =mongo:connect(test). 
B= mongo:find(A,<<"hello">>,{}).


mongo:update(G,<<"hello">>,{'_id',D},H).
